<?php
/**
 * EmailApi
 * PHP version 7.4
 *
 * @category Class
 * @package  sendpost
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SendPost API
 *
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendpost.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace sendpost\api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use sendpost\ApiException;
use sendpost\Configuration;
use sendpost\HeaderSelector;
use sendpost\ObjectSerializer;

/**
 * EmailApi Class Doc Comment
 *
 * @category Class
 * @package  sendpost
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EmailApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'sendEmail' => [
            'application/json',
        ],
        'sendEmailWithTemplate' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sendEmail
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  \sendpost\model\EmailMessage $email_message Email message (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendEmail'] to see the possible values for this operation
     *
     * @throws \sendpost\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \sendpost\model\EmailResponse[]
     */
    public function sendEmail($x_sub_account_api_key, $email_message = null, string $contentType = self::contentTypes['sendEmail'][0])
    {
        list($response) = $this->sendEmailWithHttpInfo($x_sub_account_api_key, $email_message, $contentType);
        return $response;
    }

    /**
     * Operation sendEmailWithHttpInfo
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  \sendpost\model\EmailMessage $email_message Email message (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendEmail'] to see the possible values for this operation
     *
     * @throws \sendpost\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \sendpost\model\EmailResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sendEmailWithHttpInfo($x_sub_account_api_key, $email_message = null, string $contentType = self::contentTypes['sendEmail'][0])
    {
        $request = $this->sendEmailRequest($x_sub_account_api_key, $email_message, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\sendpost\model\EmailResponse[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\sendpost\model\EmailResponse[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\sendpost\model\EmailResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\sendpost\model\EmailResponse[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\sendpost\model\EmailResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendEmailAsync
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  \sendpost\model\EmailMessage $email_message Email message (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendEmail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendEmailAsync($x_sub_account_api_key, $email_message = null, string $contentType = self::contentTypes['sendEmail'][0])
    {
        return $this->sendEmailAsyncWithHttpInfo($x_sub_account_api_key, $email_message, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendEmailAsyncWithHttpInfo
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  \sendpost\model\EmailMessage $email_message Email message (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendEmail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendEmailAsyncWithHttpInfo($x_sub_account_api_key, $email_message = null, string $contentType = self::contentTypes['sendEmail'][0])
    {
        $returnType = '\sendpost\model\EmailResponse[]';
        $request = $this->sendEmailRequest($x_sub_account_api_key, $email_message, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendEmail'
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  \sendpost\model\EmailMessage $email_message Email message (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendEmail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendEmailRequest($x_sub_account_api_key, $email_message = null, string $contentType = self::contentTypes['sendEmail'][0])
    {

        // verify the required parameter 'x_sub_account_api_key' is set
        if ($x_sub_account_api_key === null || (is_array($x_sub_account_api_key) && count($x_sub_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_sub_account_api_key when calling sendEmail'
            );
        }



        $resourcePath = '/subaccount/email/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_sub_account_api_key !== null) {
            $headerParams['X-SubAccount-ApiKey'] = ObjectSerializer::toHeaderValue($x_sub_account_api_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($email_message)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($email_message));
            } else {
                $httpBody = $email_message;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendEmailWithTemplate
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  \sendpost\model\EmailMessage $email_message Email message (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendEmailWithTemplate'] to see the possible values for this operation
     *
     * @throws \sendpost\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \sendpost\model\EmailResponse[]
     */
    public function sendEmailWithTemplate($x_sub_account_api_key, $email_message = null, string $contentType = self::contentTypes['sendEmailWithTemplate'][0])
    {
        list($response) = $this->sendEmailWithTemplateWithHttpInfo($x_sub_account_api_key, $email_message, $contentType);
        return $response;
    }

    /**
     * Operation sendEmailWithTemplateWithHttpInfo
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  \sendpost\model\EmailMessage $email_message Email message (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendEmailWithTemplate'] to see the possible values for this operation
     *
     * @throws \sendpost\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \sendpost\model\EmailResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sendEmailWithTemplateWithHttpInfo($x_sub_account_api_key, $email_message = null, string $contentType = self::contentTypes['sendEmailWithTemplate'][0])
    {
        $request = $this->sendEmailWithTemplateRequest($x_sub_account_api_key, $email_message, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\sendpost\model\EmailResponse[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\sendpost\model\EmailResponse[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\sendpost\model\EmailResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\sendpost\model\EmailResponse[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\sendpost\model\EmailResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendEmailWithTemplateAsync
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  \sendpost\model\EmailMessage $email_message Email message (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendEmailWithTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendEmailWithTemplateAsync($x_sub_account_api_key, $email_message = null, string $contentType = self::contentTypes['sendEmailWithTemplate'][0])
    {
        return $this->sendEmailWithTemplateAsyncWithHttpInfo($x_sub_account_api_key, $email_message, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendEmailWithTemplateAsyncWithHttpInfo
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  \sendpost\model\EmailMessage $email_message Email message (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendEmailWithTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendEmailWithTemplateAsyncWithHttpInfo($x_sub_account_api_key, $email_message = null, string $contentType = self::contentTypes['sendEmailWithTemplate'][0])
    {
        $returnType = '\sendpost\model\EmailResponse[]';
        $request = $this->sendEmailWithTemplateRequest($x_sub_account_api_key, $email_message, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendEmailWithTemplate'
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  \sendpost\model\EmailMessage $email_message Email message (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendEmailWithTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendEmailWithTemplateRequest($x_sub_account_api_key, $email_message = null, string $contentType = self::contentTypes['sendEmailWithTemplate'][0])
    {

        // verify the required parameter 'x_sub_account_api_key' is set
        if ($x_sub_account_api_key === null || (is_array($x_sub_account_api_key) && count($x_sub_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_sub_account_api_key when calling sendEmailWithTemplate'
            );
        }



        $resourcePath = '/subaccount/email/template';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_sub_account_api_key !== null) {
            $headerParams['X-SubAccount-ApiKey'] = ObjectSerializer::toHeaderValue($x_sub_account_api_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($email_message)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($email_message));
            } else {
                $httpBody = $email_message;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
