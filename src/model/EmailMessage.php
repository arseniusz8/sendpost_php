<?php
/**
 * EmailMessage
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  sendpost
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SendPost API
 *
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendpost.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace sendpost\model;

use \ArrayAccess;
use \sendpost\ObjectSerializer;

/**
 * EmailMessage Class Doc Comment
 *
 * @category Class
 * @package  sendpost
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmailMessage implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmailMessage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'attachments' => '\sendpost\model\Attachment[]',
        'from' => '\sendpost\model\From',
        'groups' => 'string[]',
        'html_body' => 'string',
        'ippool' => 'string',
        'pre_text' => 'string',
        'reply_to' => '\sendpost\model\ReplyTo',
        'subject' => 'string',
        'template' => 'string',
        'text_body' => 'string',
        'to' => '\sendpost\model\To[]',
        'track_clicks' => 'bool',
        'track_opens' => 'bool',
        'headers' => 'object',
        'amp_body' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'attachments' => null,
        'from' => null,
        'groups' => null,
        'html_body' => null,
        'ippool' => null,
        'pre_text' => null,
        'reply_to' => null,
        'subject' => null,
        'template' => null,
        'text_body' => null,
        'to' => null,
        'track_clicks' => null,
        'track_opens' => null,
        'headers' => null,
        'amp_body' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'attachments' => false,
		'from' => false,
		'groups' => false,
		'html_body' => false,
		'ippool' => false,
		'pre_text' => false,
		'reply_to' => false,
		'subject' => false,
		'template' => false,
		'text_body' => false,
		'to' => false,
		'track_clicks' => false,
		'track_opens' => false,
		'headers' => false,
		'amp_body' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attachments' => 'attachments',
        'from' => 'from',
        'groups' => 'groups',
        'html_body' => 'htmlBody',
        'ippool' => 'ippool',
        'pre_text' => 'preText',
        'reply_to' => 'replyTo',
        'subject' => 'subject',
        'template' => 'template',
        'text_body' => 'textBody',
        'to' => 'to',
        'track_clicks' => 'trackClicks',
        'track_opens' => 'trackOpens',
        'headers' => 'headers',
        'amp_body' => 'ampBody'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attachments' => 'setAttachments',
        'from' => 'setFrom',
        'groups' => 'setGroups',
        'html_body' => 'setHtmlBody',
        'ippool' => 'setIppool',
        'pre_text' => 'setPreText',
        'reply_to' => 'setReplyTo',
        'subject' => 'setSubject',
        'template' => 'setTemplate',
        'text_body' => 'setTextBody',
        'to' => 'setTo',
        'track_clicks' => 'setTrackClicks',
        'track_opens' => 'setTrackOpens',
        'headers' => 'setHeaders',
        'amp_body' => 'setAmpBody'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attachments' => 'getAttachments',
        'from' => 'getFrom',
        'groups' => 'getGroups',
        'html_body' => 'getHtmlBody',
        'ippool' => 'getIppool',
        'pre_text' => 'getPreText',
        'reply_to' => 'getReplyTo',
        'subject' => 'getSubject',
        'template' => 'getTemplate',
        'text_body' => 'getTextBody',
        'to' => 'getTo',
        'track_clicks' => 'getTrackClicks',
        'track_opens' => 'getTrackOpens',
        'headers' => 'getHeaders',
        'amp_body' => 'getAmpBody'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('attachments', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('groups', $data ?? [], null);
        $this->setIfExists('html_body', $data ?? [], null);
        $this->setIfExists('ippool', $data ?? [], null);
        $this->setIfExists('pre_text', $data ?? [], null);
        $this->setIfExists('reply_to', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('template', $data ?? [], null);
        $this->setIfExists('text_body', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('track_clicks', $data ?? [], null);
        $this->setIfExists('track_opens', $data ?? [], null);
        $this->setIfExists('headers', $data ?? [], null);
        $this->setIfExists('amp_body', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attachments
     *
     * @return \sendpost\model\Attachment[]|null
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \sendpost\model\Attachment[]|null $attachments attachments
     *
     * @return self
     */
    public function setAttachments($attachments)
    {
        if (is_null($attachments)) {
            throw new \InvalidArgumentException('non-nullable attachments cannot be null');
        }
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets from
     *
     * @return \sendpost\model\From|null
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param \sendpost\model\From|null $from from
     *
     * @return self
     */
    public function setFrom($from)
    {
        if (is_null($from)) {
            throw new \InvalidArgumentException('non-nullable from cannot be null');
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return string[]|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param string[]|null $groups groups
     *
     * @return self
     */
    public function setGroups($groups)
    {
        if (is_null($groups)) {
            throw new \InvalidArgumentException('non-nullable groups cannot be null');
        }
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets html_body
     *
     * @return string|null
     */
    public function getHtmlBody()
    {
        return $this->container['html_body'];
    }

    /**
     * Sets html_body
     *
     * @param string|null $html_body html_body
     *
     * @return self
     */
    public function setHtmlBody($html_body)
    {
        if (is_null($html_body)) {
            throw new \InvalidArgumentException('non-nullable html_body cannot be null');
        }
        $this->container['html_body'] = $html_body;

        return $this;
    }

    /**
     * Gets ippool
     *
     * @return string|null
     */
    public function getIppool()
    {
        return $this->container['ippool'];
    }

    /**
     * Sets ippool
     *
     * @param string|null $ippool ippool
     *
     * @return self
     */
    public function setIppool($ippool)
    {
        if (is_null($ippool)) {
            throw new \InvalidArgumentException('non-nullable ippool cannot be null');
        }
        $this->container['ippool'] = $ippool;

        return $this;
    }

    /**
     * Gets pre_text
     *
     * @return string|null
     */
    public function getPreText()
    {
        return $this->container['pre_text'];
    }

    /**
     * Sets pre_text
     *
     * @param string|null $pre_text pre_text
     *
     * @return self
     */
    public function setPreText($pre_text)
    {
        if (is_null($pre_text)) {
            throw new \InvalidArgumentException('non-nullable pre_text cannot be null');
        }
        $this->container['pre_text'] = $pre_text;

        return $this;
    }

    /**
     * Gets reply_to
     *
     * @return \sendpost\model\ReplyTo|null
     */
    public function getReplyTo()
    {
        return $this->container['reply_to'];
    }

    /**
     * Sets reply_to
     *
     * @param \sendpost\model\ReplyTo|null $reply_to reply_to
     *
     * @return self
     */
    public function setReplyTo($reply_to)
    {
        if (is_null($reply_to)) {
            throw new \InvalidArgumentException('non-nullable reply_to cannot be null');
        }
        $this->container['reply_to'] = $reply_to;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject subject
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets template
     *
     * @return string|null
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param string|null $template template
     *
     * @return self
     */
    public function setTemplate($template)
    {
        if (is_null($template)) {
            throw new \InvalidArgumentException('non-nullable template cannot be null');
        }
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets text_body
     *
     * @return string|null
     */
    public function getTextBody()
    {
        return $this->container['text_body'];
    }

    /**
     * Sets text_body
     *
     * @param string|null $text_body text_body
     *
     * @return self
     */
    public function setTextBody($text_body)
    {
        if (is_null($text_body)) {
            throw new \InvalidArgumentException('non-nullable text_body cannot be null');
        }
        $this->container['text_body'] = $text_body;

        return $this;
    }

    /**
     * Gets to
     *
     * @return \sendpost\model\To[]|null
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param \sendpost\model\To[]|null $to to
     *
     * @return self
     */
    public function setTo($to)
    {
        if (is_null($to)) {
            throw new \InvalidArgumentException('non-nullable to cannot be null');
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets track_clicks
     *
     * @return bool|null
     */
    public function getTrackClicks()
    {
        return $this->container['track_clicks'];
    }

    /**
     * Sets track_clicks
     *
     * @param bool|null $track_clicks track_clicks
     *
     * @return self
     */
    public function setTrackClicks($track_clicks)
    {
        if (is_null($track_clicks)) {
            throw new \InvalidArgumentException('non-nullable track_clicks cannot be null');
        }
        $this->container['track_clicks'] = $track_clicks;

        return $this;
    }

    /**
     * Gets track_opens
     *
     * @return bool|null
     */
    public function getTrackOpens()
    {
        return $this->container['track_opens'];
    }

    /**
     * Sets track_opens
     *
     * @param bool|null $track_opens track_opens
     *
     * @return self
     */
    public function setTrackOpens($track_opens)
    {
        if (is_null($track_opens)) {
            throw new \InvalidArgumentException('non-nullable track_opens cannot be null');
        }
        $this->container['track_opens'] = $track_opens;

        return $this;
    }

    /**
     * Gets headers
     *
     * @return object|null
     */
    public function getHeaders()
    {
        return $this->container['headers'];
    }

    /**
     * Sets headers
     *
     * @param object|null $headers headers
     *
     * @return self
     */
    public function setHeaders($headers)
    {
        if (is_null($headers)) {
            throw new \InvalidArgumentException('non-nullable headers cannot be null');
        }
        $this->container['headers'] = $headers;

        return $this;
    }

    /**
     * Gets amp_body
     *
     * @return string|null
     */
    public function getAmpBody()
    {
        return $this->container['amp_body'];
    }

    /**
     * Sets amp_body
     *
     * @param string|null $amp_body amp_body
     *
     * @return self
     */
    public function setAmpBody($amp_body)
    {
        if (is_null($amp_body)) {
            throw new \InvalidArgumentException('non-nullable amp_body cannot be null');
        }
        $this->container['amp_body'] = $amp_body;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


